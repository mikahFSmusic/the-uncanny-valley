{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mfs/Desktop/web_apps/the-uncanny-valley/front/src/components/Box.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport { useFrame } from 'react-three-fiber';\n\nfunction Box(props) {\n  _s();\n\n  // This reference will give us direct access to the mesh\n  const mesh = useRef(); // Set up state for the hovered and active state\n\n  const [hovered, setHover] = useState(false);\n  const [active, setActive] = useState(false);\n  let direction = true; // Rotate mesh every frame, this is outside of React without overhead\n\n  useFrame(() => {\n    if (mesh.current) {\n      mesh.current.rotation.x = mesh.current.rotation.y += 0.01;\n\n      if (mesh.current.position.x === 1.0) {\n        direction = false;\n      }\n\n      if (mesh.current.position.x === -1.0) {\n        direction = true;\n      }\n\n      if (direction == true) {\n        mesh.current.position.x += 0.01;\n      } else {\n        mesh.current.position.x -= 0.01;\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n    ref: mesh,\n    scale: active ? [1.5, 1.5, 1.5] : [1, 1, 1],\n    onClick: event => setActive(!active),\n    onPointerOver: event => setHover(true),\n    onPointerOut: event => setHover(false),\n    children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n      args: [1, 1, 1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: hovered ? 'hotpink' : 'orange'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Box, \"Gf95ovYMxCkb+HRFcD1+zMTFs6g=\", false, function () {\n  return [useFrame];\n});\n\n_c = Box;\nexport default Box;\n\nvar _c;\n\n$RefreshReg$(_c, \"Box\");","map":{"version":3,"sources":["/Users/mfs/Desktop/web_apps/the-uncanny-valley/front/src/components/Box.tsx"],"names":["React","useRef","useState","useFrame","Box","props","mesh","hovered","setHover","active","setActive","direction","current","rotation","x","y","position","event"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAAoBC,QAApB,QAAoC,mBAApC;;AAGA,SAASC,GAAT,CAAaC,KAAb,EAA+B;AAAA;;AAC7B;AACA,QAAMC,IAAI,GAAGL,MAAM,EAAnB,CAF6B,CAI7B;;AACA,QAAM,CAACM,OAAD,EAAUC,QAAV,IAAsBN,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,KAAD,CAApC;AACA,MAAIS,SAAS,GAAG,IAAhB,CAP6B,CAS7B;;AACAR,EAAAA,QAAQ,CAAC,MAAM;AACb,QAAIG,IAAI,CAACM,OAAT,EAAkB;AAChBN,MAAAA,IAAI,CAACM,OAAL,CAAaC,QAAb,CAAsBC,CAAtB,GAA0BR,IAAI,CAACM,OAAL,CAAaC,QAAb,CAAsBE,CAAtB,IAA2B,IAArD;;AACA,UAAIT,IAAI,CAACM,OAAL,CAAaI,QAAb,CAAsBF,CAAtB,KAA4B,GAAhC,EAAqC;AACnCH,QAAAA,SAAS,GAAG,KAAZ;AACD;;AACD,UAAIL,IAAI,CAACM,OAAL,CAAaI,QAAb,CAAsBF,CAAtB,KAA4B,CAAC,GAAjC,EAAsC;AACpCH,QAAAA,SAAS,GAAG,IAAZ;AACD;;AACD,UAAIA,SAAS,IAAI,IAAjB,EAAuB;AACrBL,QAAAA,IAAI,CAACM,OAAL,CAAaI,QAAb,CAAsBF,CAAtB,IAA2B,IAA3B;AACD,OAFD,MAEO;AACLR,QAAAA,IAAI,CAACM,OAAL,CAAaI,QAAb,CAAsBF,CAAtB,IAA2B,IAA3B;AACD;AAEF;AACF,GAhBO,CAAR;AAkBA,sBACE,qBACMT,KADN;AAEE,IAAA,GAAG,EAAEC,IAFP;AAGE,IAAA,KAAK,EAAEG,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAH,GAAqB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHpC;AAIE,IAAA,OAAO,EAAGQ,KAAD,IAAWP,SAAS,CAAC,CAACD,MAAF,CAJ/B;AAKE,IAAA,aAAa,EAAGQ,KAAD,IAAWT,QAAQ,CAAC,IAAD,CALpC;AAME,IAAA,YAAY,EAAGS,KAAD,IAAWT,QAAQ,CAAC,KAAD,CANnC;AAAA,4BAOE;AAAmB,MAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAAzB;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE;AAAsB,MAAA,KAAK,EAAED,OAAO,GAAG,SAAH,GAAe;AAAnD;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GAxCQH,G;UAUPD,Q;;;KAVOC,G;AA0CT,eAAeA,GAAf","sourcesContent":["import React, { useRef, useState } from 'react'\nimport { MeshProps, useFrame } from 'react-three-fiber'\nimport { Mesh } from 'three'\n\nfunction Box(props: MeshProps) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef<Mesh>()\n\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n  let direction = true\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => {\n    if (mesh.current) {\n      mesh.current.rotation.x = mesh.current.rotation.y += 0.01\n      if (mesh.current.position.x === 1.0) {\n        direction = false;\n      }\n      if (mesh.current.position.x === -1.0) {\n        direction = true;\n      }\n      if (direction == true) {\n        mesh.current.position.x += 0.01;\n      } else {\n        mesh.current.position.x -= 0.01;\n      }\n\n    }\n  })\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={active ? [1.5, 1.5, 1.5] : [1, 1, 1]}\n      onClick={(event) => setActive(!active)}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}>\n      <boxBufferGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\n\nexport default Box;\n"]},"metadata":{},"sourceType":"module"}